const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const responses = require('../http-responses')
const httpStatus = require('http-status');
const APIError = require('../helpers/APIError');
const config = require('../../config/config');
const queries = require('../sql/auth.queries.js')

const handleLoginError = err =>
  err ? responses.unknownError(err) : responses.loginFailed();

const respondWithToken = value => {
  const token = jwt.sign({
    username: value.get('email')
  }, config.jwtSecret);

  return { status: 200, resp: token };
};

/**
 * Returns jwt token if valid username and password is provided
 * @param req
 * @param res
 * @param next
 * @returns {*}
 */


async function login(req, res, next) {
  const user = { email: req.body.email, password: req.body.password }
  return(validatePassword(user)).then(respondWithToken, handleLoginError)
}



/**
 * This is a protected route. Will return random number only if jwt token is provided in header.
 * @param req
 * @param res
 * @returns {*}
 */
function getRandomNumber(req, res) {
  // req.user is assigned by jwt middleware if valid token is provided
  return res.json({
    user: req.user,
    num: Math.random() * 100
  });
}

/**
 * Protected Route. Get User information by token
 * @param req
 * @param res
 * @returns {*}
 */
function getUserInformation(req, res) {
  // req.user is assigned by jwt middleware if valid token is provided
  //const [foundRow] = await
  return res.json({
    user: req.user,
    num: Math.random() * 100
  });
}

const validatePassword = async value => {
  queries.getUserDataByEmail(value);
  console.info("sadasd")
  if (foundRow) {
    const { password: hashedPassword } = foundRow;
    const passwordIsCorrect = await bcrypt.compare(
      value.get('password'),
      hashedPassword
    );

    // return value with name to create session object
    console.info("validatepassword", foundRow)
    const valueFull = {...value, ...foundRow}
    return passwordIsCorrect ? valueFull : Promise.reject();
  }
  return Promise.reject();
};

module.exports = { login, getRandomNumber, getUserInformation };
